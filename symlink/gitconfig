[alias]
    # add
    a = add                           # add
    chunkyadd = add --patch           # stage commits chunk by chunk

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    # branch
    b = branch -v                     # branch (verbose)

    # commit
    c = commit -m                     # commit with message
    ca = commit -am                   # commit all with message
    ci = commit                       # commit
    amend = commit --amend            # ammend your last commit
    ammend = commit --amend           # ammend your last commit
    untrack = rm -r --cached
    rewrite = rebase -i

    # checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    d = diff                          # diff unstaged changes
    dc = diff --cached                # diff staged changes
    last = diff HEAD^                 # diff last committed change

    # log
    graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Creset• %<(75,trunc)%s (%cN, %ar) %Cred%d' --date-order
    history = log -10 --format=format:'%Cgreen%h %Creset• %s (%cN, %ar)'
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    simple = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
    contributors = shortlog -s -n
    last = log -1 HEAD --format=format:"%Cred%H"

    # pull
    pl = pull                         # pull

    # push
    ps = push                         # push

    # rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase

    # remote
    r = remote -v                     # show remotes (verbose)

    # reset
    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

    # stash
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)

    # status
    s = status -s                     # status
    st = status -s                    # status
    stat = status -s                  # status

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "git branch --merged | grep -vE '^\\*|master$|develop$' | xargs -I % git branch -d %"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # https://zarino.co.uk/post/git-set-upstream/
    set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`

    # Global .gitconfig aliases for GitHub Pull Request Managment
    # https://gist.github.com/gnarf/5406589
    # https://gist.github.com/piscisaureus/3342247
    pr  = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"


[format]

    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[branch]

    autosetupmerge = true

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    # Use custom `.gitignore`
    excludesfile = ~/.gitignore

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    editor = vim

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red           # deletions
    new = green         # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[diff]

    # Detect copies as well as renames
    renames = copies
    compactionHeuristic = true

[color "diff-highlight"]

    oldNormal    = red bold
    oldHighlight = red bold 52
    newNormal    = green bold
    newHighlight = green bold 22

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]

    # push easily. http://stackoverflow.com/a/23918418/89484
    default = current

    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[commit]

    template = ~/.gitmessage
    gpgsign = false

[pager]

    # TODO: Need diff-so-fancy
    # https://github.com/so-fancy/diff-so-fancy
    log  = diff-so-fancy | less --tabs=4 -RFX
    show = diff-so-fancy | less --tabs=4 -RFX
    diff = diff-so-fancy | less --tabs=4 -RFX

[diff-so-fancy]

    stripLeadingSymbols = false

# URL shorthands

[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"

[gpg]

    program = gpg2
