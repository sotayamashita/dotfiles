#!/bin/bash

readonly DOTFILES_DIRECTORY="${HOME}/.dotfiles"
readonly EXTRA_FILE_NAME=".extra"
readonly EXTRA_FILE_PATH="${HOME}/${EXTRA_FILE_NAME}"

source ${DOTFILES_DIRECTORY}/lib/utils

RETVAL="0"

#######################################
# Install itself
#######################################
bootstrap() {
  # Ask for the administrator password upfront
  sudo -v

  # Install xcode-select if needed
  # See: https://www.manpagez.com/man/1/xcode-select/
  if ! type xcode-select >&- && xpath=$( xcode-select --print-path ) && test -d "${xpath}" && test -x "${xpath}"; then
    info "Installing xcode-select"
    xcode-select --install
  else
    success "Done. xcode-select already installed"
  fi

  # Install homebrew if needed
  # See: https://brew.sh/
  if ! type_exists "brew"; then
    info "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    success "Done. homebrew already installed"
  fi

  # Install oh-my-fish if needed
  # See: https://github.com/oh-my-fish/oh-my-fish#installation
  if ! type_exists "omf"; then
    info "Installing oh-my-fish"
    curl -sLo ~/.config/fish/functions/fisher.fish --create-dirs git.io/fisher
  else
    success "Done. oh-my-fish already installed"
  fi

  # Change your default shell to "fish"
  if ! type_exists "fish" && [[ $SHELL -eq "fish" ]]; then
    info "Changing your default shell to \"fish\""
    chsh -s /usr/local/bin/fish
  else
    success "Done. fish already installed"
  fi

  # Install homebrew formulas
  if type_exists "brew"; then
    bash $DOTFILES_DIRECTORY/lib/brew &> /dev/null
  fi

  # Create extra file
  if [[ ! -e $EXTRA_FILE_PATH ]]; then
    cat <<EOT >> $EXTRA_FILE_PATH
# All
set AUTHOR_NAME                       "<Your Name>"
set AUTHOR_MAIL                       "<Your Email Address>"

# Git
set GIT_AUTHOR_NAME                   "\$AUTHOR_NAME"
set GIT_COMITTER_NAME                 "\$GIT_AUTHOR_NAME"
git config --global user.name         "\$GIT_COMITTER_NAME"

set GIT_AUTHOR_MAIL                   "\$AUTHOR_MAIL"
set GIT_COMITTER_EMAIL                "\$GIT_AUTHOR_MAIL"
git config --global user.email        "\$GIT_AUTHOR_MAIL"

set GIT_AUTHOR_SIGNINGKEY             "xxxxxxxx"
set GIT_COMMIT_SIGNINGKEY             "\$GIT_AUTHOR_SIGNINGKEY"
git config --global user.signingkey   "\$GIT_AUTHOR_SIGNINGKEY"
EOT
  else
    success "Done. ~/.extra already created"
  fi

  # Make symbolic link
  for file in $( ls ${DOTFILES_DIRECTORY}/symlink/* )
  do
    link "${DOTFILES_DIRECTORY}/symlink/${file##*/}" "${HOME}/.${file##*/}"
  done
  success "Done. symbolic links are created."

  # Ask before potentially overwriting OS X defaults
  seek_confirmation "Warning: This step may modify your OS X system defaults."
  if is_confirmed; then
      bash $DOTFILES_DIRECTORY/lib/macos
      success "Done. Note: that some of these changes require a logout/restart to take effect."
  else
      info "Skipped OS X settings update."
  fi

  RETVAL="0"
}

#######################################
# Update itself
#######################################
update() {
  printf "\xf0\x9f\x9a\x80\x20 Pull origin master ..."
  git -C $DOTFILES_DIRECTORY reset --hard HEAD
  git -C $DOTFILES_DIRECTORY clean -fd
  git -C $DOTFILES_DIRECTORY pull --rebase
  cp -r  $DOTFILES_DIRECTORY/.config/fish/* ~/.config/fish/
  fish -c "source ~/.config/fish/config.fish"

  RETVAL="0"
}

#######################################
# Show usage
#######################################
usage() {
cat <<EOT
Usage: $(basename "$0") <command>

Commands:
    bootstrap   Execute everything
    update      Pull the latest changes
EOT
  RETVAL="2"
}

#######################################
# Entry point
#######################################
main() {
  # Clone repostiory if it does not exist
  if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    git clone --depth=1 https://github.com/sotayamashita/dotfiles.git ${DOTFILES_DIRECTORY} &> /dev/null
  fi

  for ARGUMENT in $@; do
    case "$ARGUMENT" in
      bootstrap)
        bootstrap
        ;;

      update)
        update
        ;;

      *)
        usage
        ;;
    esac
    if [ "$RETVAL" -ne 0 ]; then
      break
    fi
  done

  exit $RETVAL
}

main "$@"
