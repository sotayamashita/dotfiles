#!/bin/bash

RETVAL="0"

readonly DOTFILES_DIR_PATH="$PWD"

symbolic_links() {

    # Symbolic source and target links
    links=(
        ".config/fish/config.fish:.config/fish/config.fish"
        ".config/git/.gitconfig:.gitconfig"
        ".config/git/.gitconfig.alias:.gitconfig.alias"
        ".config/git/.gitconfig.user:.gitconfig.user"
        ".config/git/.gitconfig.delta:.gitconfig.delta"
        ".config/git/.gitignore.global:.gitignore.global"
        ".config/iterm2/com.googlecode.iterm2.plist:.config/iterm2/com.googlecode.iterm2.plist"
        ".config/starship.toml:.config/starship.toml"
    )

    # Create symbolic a link to a file
    for link in "${links[@]}"; do
        source="${DOTFILES_DIR_PATH}/${link%%:*}"
        target="${HOME}/${link##*:}"

        ln -sf "${source}" "${target}"
    done

    RETVAL="0"
}

help() {
    printf "$(tput setaf 3)Usage:$(tput sgr0)\n"
    printf "  $(basename $0) [OPTIONS]\n"
    printf "  $(basename $0) <subcommand>\n"
    printf "\n"
    printf "$(tput setaf 3)OPTIONS:$(tput sgr0)\n"
    printf "  $(tput setaf 2)-h$(tput sgr0), $(tput setaf 2)--help$(tput sgr0)\n"
    printf "    Print this help message\n"
    printf "\n"
    printf "$(tput setaf 3)SUBCOMMANDS:$(tput sgr0)\n"
    printf "  $(tput setaf 2)links$(tput sgr0)\n"
    printf "    Create symbolic links\n"

    RETVAL="1"
}

main() {
    for ARGUMENT in "$@"; do
        case "$ARGUMENT" in
            links)
                symbolic_links
                ;;

            "-h" | "--help")
                help
                ;;

         esac
         [ "$RETVAL" -ne 0 ] && break
    done

    exit $RETVAL
}

main "$@"
